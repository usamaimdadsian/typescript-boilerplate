
const { program } = require('commander');
const fs = require('fs');
const path = require('path');

const main_folder = __dirname
const parent_folder = path.join(__dirname,"src","modules")

const getPath = (val) => {
    return path.join(parent_folder,val)
}

const getTemplatePath = (val) => {
    return path.join(main_folder,"templates",val)
}

const getVariables = (val) => {
    let arr = val.split("/")
    val = arr.pop()
    // let name = val.toLowerCase()
    let name = val.charAt(0).toLowerCase() + val.slice(1)
    let name_capitalize = val.charAt(0).toUpperCase() + val.slice(1)

    let controller_name = name_capitalize+"Controller"
    let model_name = name_capitalize
    let validation_name = name_capitalize+"Validation"
    let service_name = name_capitalize+"Service"
    let router_name = name_capitalize+"Routes"
    let swagger_name = name_capitalize+"Swagger"

    let pth = path.join(name,arr.join("/"))

    return {path:pth, name, model_name, controller_name, validation_name, service_name, router_name, swagger_name}
}

const paths = {
    interface: getTemplatePath("artisan.interface"),
    model: getTemplatePath("artisan.model"),
    controller: getTemplatePath("artisan.controller"),
    route: getTemplatePath("artisan.route"),
    service: getTemplatePath("artisan.service"),
    validation: getTemplatePath("artisan.validation"),
    swagger: getTemplatePath("artisan.swagger")
}

const createFile = (content, directoryPath,file_name, swagger=false) => {
  directoryPath = path.join(parent_folder,directoryPath)
  let file_path;

  if (swagger){
    file_path = path.join(directoryPath,file_name+".yaml")
  }
  else{
    file_path = path.join(directoryPath,file_name+".ts")
  }

  // Check if the directory exists
  if (!fs.existsSync(directoryPath)) {
    // Directory does not exist, create it
    fs.mkdirSync(directoryPath, { recursive: true });
  }

  fs.writeFile(file_path, content, (err) => {
    if (err) {
      console.error(`Failed to create file ${file_path}: ${err}`);
    } else {
      console.log(`File ${file_name} created successfully!`);
    }
  });
}

const createModel = (name,model_name, path) => {
  let file_path = paths.model
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<model_name>/g, model_name).replace(/<name>/g,name)
  
    // Output the modified content
    createFile(replacedContent,path,model_name)
  });


  file_path = paths.interface
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<model_name>/g, model_name)
  
    // Output the modified content
    createFile(replacedContent,path,model_name+"Interface")
  });


  
}

const createController = (model_name, controller_name, validation_name, path) => {
  let file_path = paths.controller
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<model_name>/g, model_name).replace(/<controller_name>/g, controller_name).replace(/<validation_name>/g, validation_name);
  
    // Output the modified content
    createFile(replacedContent,path,controller_name)

  });
}

const createRouter = (name, controller_name, router_name, model_name,swagger_name, path) => {
  let file_path = paths.route
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<name>/g, name).replace(/<controller_name>/g, controller_name);
  
    // Output the modified content
    // console.log(replacedContent);
    createFile(replacedContent,path,router_name)

  });

  file_path = paths.swagger
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<name>/g, name).replace(/<model_name>/g,model_name);
  
    // Output the modified content
    // console.log(replacedContent);
    createFile(replacedContent,path,swagger_name,true)

  });
  
}

const createService = (model_name, service_name, path) => {
  let file_path = paths.service
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<service_name>/g, service_name).replace(/<model_name>/g, model_name);
  
    // Output the modified content
    // console.log(replacedContent);
    createFile(replacedContent,path,service_name)

  });
  
}

const createValidation = (name, model_name, validation_name, path) => {
  let file_path = paths.validation
  fs.readFile(file_path, 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
  
    // Replace placeholders with strings
    const replacedContent = data.replace(/<name>/g, name).replace(/<model_name>/g, model_name).replace(/<validation_name>/g, validation_name);
  
    // Output the modified content
    // console.log(replacedContent);
    createFile(replacedContent,path,validation_name)

  });
  
}


const autoCreator = (vars,options) => {
  if (options.length > 0){
    if (options.includes("all")){
      createModel(vars.name,vars.model_name,vars.path)
      createController(vars.model_name,vars.controller_name,vars.validation_name, vars.path)
      createRouter(vars.name, vars.controller_name,vars.router_name, vars.model_name, vars.swagger_name, vars.path)
      createService(vars.model_name,vars.service_name, vars.path)
      createValidation(vars.name, vars.model_name, vars.validation_name, vars.path)
      
    }
    else{
      for (let option of options){
          if (option === "model"){
              createModel(vars.name,vars.model_name,vars.path)
          }
          if (option === "controller"){
            createController(vars.model_name,vars.controller_name,vars.validation_name, vars.path)
          }
          if (option === "route"){
            createRouter(vars.name, vars.controller_name,vars.router_name, vars.model_name,vars.swagger_name, vars.path)
          }
          if (option === "service"){
            createService(vars.model_name,vars.service_name, vars.path)
          }
          if (option === "validation"){
            createValidation(vars.name, vars.model_name, vars.validation_name, vars.path)
          }
          
      }
    }
  }
  else{
    createModel(vars.name,vars.model_name,vars.path)
    createController(vars.model_name,vars.controller_name,vars.validation_name, vars.path)
    createRouter(vars.name, vars.controller_name,vars.router_name, vars.model_name,vars.swagger_name, vars.path)
    createService(vars.model_name,vars.service_name, vars.path)
    createValidation(vars.name, vars.model_name, vars.validation_name, vars.path)
    
  }

}

// Custom command "make"
program
  .command('make <name>')
  .description('Create a new file')
//   .option('-t, --type <type>', 'Specify the file type')
  .option('-a, --all', 'Create all files')
  .option('-m, --model', 'create model')
  .option('-c, --controller', 'create controller')
  .option('-r, --route', 'create route')
  .option('-s, --service', 'create service')
  .option('-v, --validation', 'create validation')

  .action((name, options) => {
    let vars = getVariables(name)
    options = Object.keys(options)

    autoCreator(vars,options)

  });

// Parse the command-line arguments
program.parse(process.argv);
