import mongoose from 'mongoose';
import { Request, Response } from 'express';

import { IOptions, Controller, validate } from '@/components';
import { HttpStatus, response, pick, ApiError } from '@/utils';

import <model_name>Service from './<model_name>Service';
import { <validation_name> } from './<validation_name>';


export class <controller_name> extends Controller {

    @validate(<validation_name>.index)
    public async index(req: Request, res: Response){
        const filter = pick(req.query, ['name', 'role']);
        const options: IOptions = pick(req.query, ['sortBy', 'limit', 'page', 'projectBy']);
        const result = await <model_name>Service.query<model_name>s(filter, options);
        response(HttpStatus.OK, res, result)
    };

    @validate(<validation_name>.show)
    public async show(req: Request, res: Response){
        const user = await <model_name>Service.get<model_name>ById(req.params.userId);
        if (!user) {
            throw new ApiError(HttpStatus.NOT_FOUND, '<model_name> not found');
        }
        response(HttpStatus.OK, res, user)
    };

    @validate(<validation_name>.create)
    public async create(req: Request, res: Response){
        const user = await <model_name>Service.create<model_name>(req.body);
        response(HttpStatus.CREATED, res, user)
    };


    @validate(<validation_name>.update)
    public async update(req: Request, res: Response){
        const user = await <model_name>Service.update<model_name>ById(new mongoose.Types.ObjectId(req.params.userId), req.body);

        if (user) {
            response(HttpStatus.OK, res, user)
        } else {
            response(HttpStatus.NOT_FOUND, res)
        }
    };


    @validate(<validation_name>.delete)
    public async delete(req: Request, res: Response){
        await <model_name>Service.delete<model_name>ById(req.params.userId);
        response(HttpStatus.NO_CONTENT, res)
    };
}
