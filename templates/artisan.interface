import mongoose, { Document, Model } from "mongoose"

import { QueryResult } from "@/components";
import { AccessAndRefreshTokens } from "@/modules/token/TokenInterface";

export interface I<model_name> {
  name: string;
  email: string;
  password: string;
  role: string;
  isEmailVerified: boolean;
}
  
export interface I<model_name>Doc extends I<model_name>, Document {
  isPasswordMatch(password: string): Promise<boolean>;
}

export interface I<model_name>Model extends Model<I<model_name>Doc> {
  isEmailTaken(email: string, exclude<model_name>Id?: mongoose.Types.ObjectId): Promise<boolean>;
  paginate(filter: Record<string, any>, options: Record<string, any>): Promise<QueryResult>;
}

export type Update<model_name>Body = Partial<I<model_name>>;

export type NewRegistered<model_name> = Omit<I<model_name>, 'role' | 'isEmailVerified'>;

export type NewCreated<model_name> = Omit<I<model_name>, 'isEmailVerified'>;

export interface I<model_name>WithTokens {
  user: I<model_name>Doc;
  tokens: AccessAndRefreshTokens;
}